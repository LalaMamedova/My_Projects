import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

stop = False
pause = False
bot = Bot('6631346671:AAFKV8rTDIj7J4RxrOib-BBlaJ8qTWa3li8')
dp = Dispatcher(bot)

inline = types.InlineKeyboardMarkup()
inline.row(types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='stopTimer'))
inline.row(types.InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É", callback_data='pauseTimer'),types.InlineKeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data='startTimer'))

class Form(StatesGroup):
    SetATime = State()

@dp.message_handler(commands=['start','timer','set'])
async def start(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton(text='–°–î–í–ì(10 –º–∏–Ω—É—Ç)', callback_data='adhd'),types.InlineKeyboardButton(text='–û–±—ã—á–Ω—ã–π(20 –º–∏–Ω—É—Ç)', callback_data='avarege'))
    markup.row(types.InlineKeyboardButton(text='–ì–∏–ø–µ—Ä—Ñ–∏–∫—Å–∞—Ü–∏—è(35 –º–∏–Ω—É—Ç)', callback_data='hyper'),types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä', callback_data='settime'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏',reply_markup=markup)


@dp.callback_query_handler()
async def inline_callback(callback_query: types.CallbackQuery):

    global stop, pause
    actions = {
        'adhd': ('‚è≤Ô∏è –ù–∞—á–∏–Ω–∞—é —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç...', 10 * 60),
        'average': ('‚è≤Ô∏è –ù–∞—á–∏–Ω–∞—é —Ç–∞–π–º–µ—Ä –Ω–∞ 20 –º–∏–Ω—É—Ç...', 20 * 60),
        'hyper': ('‚è≤Ô∏è –ù–∞—á–∏–Ω–∞—é —Ç–∞–π–º–µ—Ä –Ω–∞ 35 –º–∏–Ω—É—Ç...', 35 * 60),
    }
    action = actions.get(callback_query.data)

    if action:
        message_text, duration = action
        if duration:
            timer_message = await bot.send_message(callback_query.from_user.id, message_text)
            await update_timer(timer_message, duration)

    elif (callback_query.data == 'settime'):
        await bot.send_message(callback_query.from_user.id, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–µ—Ä')
        await Form.SetATime.set()
    elif(callback_query.data == 'pauseTimer'):
        if(pause == False):
            pause = True
            await callback_query.answer('–¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ')
    elif (callback_query.data == 'startTimer'):
        if (pause == True):
            await callback_query.answer('–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω')
            pause = False
    else:
        stop = True


@dp.message_handler(state=Form.SetATime)
async def setTime(message: types.Message):
    try:
        if (int(message.text)):
            minut = int(message.text)
            await update_timer(message, minut * 60)
    except:
        await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∏—Å–ª–∞—Ö!(–Ω–∞–ø—Ä–∏–º–µ—Ä 30)')



async def update_timer(message: types.Message, seconds):
    await timerTemplate(message,seconds,'–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è','‚è≤Ô∏è')
    await breakTime(message)



async def breakTime(message: types.Message):
    await bot.send_message(message.chat.id, '‚è≤Ô∏è–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å!!')
    await timerTemplate(message,300,'–û—Ç–¥—ã—Ö–∞–µ–º','üßò')
    await bot.send_message(message.chat.id,'–ù–µ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?')
    await start(message)



async def timerTemplate(message: types.Message, seconds,whatDoing,emoji):
    global stop,pause

    for remaining_seconds in range(seconds, 0, -1):
        minutes, seconds = divmod(remaining_seconds, 60)
        timer_message = f'{emoji} {whatDoing}: <b>{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥</b>'
        await bot.edit_message_text(text=timer_message, chat_id=message.chat.id, message_id=message.message_id,
                                    parse_mode='HTML', reply_markup=inline)
        if (stop == True):
            stop = False
            break

        while (pause == True):
            await asyncio.sleep(0.5)
        await asyncio.sleep(1)


async def sendMinuts(message,minutes,whatDoing,emoji):
    timer_message = f'<b>{emoji} {whatDoing}:</b> <b>{minutes/60} –º–∏–Ω—É—Ç {0} —Å–µ–∫—É–Ω–¥</b>'
    await bot.send_message(chat_id=message.chat.id,text=timer_message, parse_mode='HTML')

executor.start_polling(dp,  skip_updates=True)